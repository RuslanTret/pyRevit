#!/bin/bash

OPTIND=1    # Reset in case getopts has been used previously in the shell.
THISPATH=$(dirname "$0")

# initialize build options
OPENDOCS=false
BUILDDOCS=false
BUILDLABS=false
REBUILD=false

# ==============================================================================
# Configs
# ------------------------------------------------------------------------------
LABS=$THISPATH/pyRevitLabs/pyRevitLabs.sln
UTILSPATH=$THISPATH/utils
BINPATH=$THISPATH/../bin
DEVENV='devenv.exe'
AUTOCOMP=$UTILSPATH/pyrevit-autocomplete.exe
FINFO=$UTILSPATH/pyrevit-fileinfo.exe
# ==============================================================================

function print_help {
    cat << EOF
Usage: build OPTIONS

| Dependencies:                                                                |
|                                                                              |
|     Install these tools before starting build process                        |
|         cmder               https://cmder.net/                               |
|         choco               https://chocolatey.org/install                   |
|         Visual Studio (C#)  https://visualstudio.microsoft.com/vs/           |
|                                                                              |
|     Add the "Microsoft Visual Studio\2017\Community\Common7\IDE" path        |
|     to system %PATH% env variable. Test devenv.exe works from shell.         |
|                                                                              |
|     After successfully installing dependencies, open cmder and run command   |
|     below. This will install all necessary build-time dependencies.          |
|         $ build -i                                                           |

OPTIONS:
    -h                  print this help
    -d                  build documentation using sphinx.
    -l                  build pyrevit labs modules and cli tool using
                        Visual Studio C# compiler
    -c                   clean build files
    -r                  re-build
    -p                  open docs page after build

Notes:
    1. bash build script is used to allow building docs and other
       non-win-dependent components on other operating systems as well.

Report bugs to: https://github.com/eirannejad/pyRevit/issues

EOF
exit 1
}

function check_docs_buildenv {
    echo "verifying build dependencies for docs..."
    if ! [ -x "$(command -v pipenv)" ]; then
        echo -e '\033[31mError: pipenv is not installed.\033[39m\n' >& 2
        print_help
        exit 5
    fi
}

function check_labs_buildenv {
    echo "verifying build dependencies for labs..."
    if ! [ -x "$(command -v upx)" ]; then
        echo -e '\033[31mError: upx is not installed.\033[39m\n' >& 2
        print_help
        exit 2
    elif ! [ -x "$(command -v go)" ]; then
        echo -e '\033[31mError: go is not installed.\033[39m\n' >& 2
        print_help
        exit 3
    elif ! [ -x "$(command -v devenv)" ]; then
        echo -e '\033[31mError: Visual Studio is not installed.\033[39m\n' >& 2
        print_help
        exit 4
    fi
}

function clean_docs {
    # function to clean all generated docs
    echo "cleaning docs..."
    rm -rf $THISPATH/../docs/_build
}

function clean_labs {
    # function to clean labs build files
    echo "cleaning labs..."
    rm -f ../bin/pyrevit*
    rm -f ../bin/*.dll
    "$DEVENV" "$LABS" "//Clean" "Debug" "//out" "./buildlog.log"
}

function clean_opt {
    clean_docs
    clean_labs
}

function install_opt {
    echo "installing build-time dependencies..."
    echo "installing upx..."
    choco install upx -y &>/dev/null
    echo "installing go..."
    choco install golang -y &>/dev/null
    echo "installing python 2.7..."
    choco install python2 -y &>/dev/null
    echo "installing pipenv..."
    pip2 install pipenv
    pipenv install
}

function process_args {
    while getopts "hidlrpc" opt; do
        case "$opt" in
        h|\?) print_help
            ;;
        i)  install_opt
            ;;
        d)  BUILDDOCS=true
            ;;
        p)  OPENDOCS=true
            ;;
        l)  BUILDLABS=true
            ;;
        r)  REBUILD=true
            ;;
        c)  clean_opt
            ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then print_help; fi
    shift $((OPTIND-1))
}

# ==============================================================================
# main()
# ==============================================================================
# process command line arguments and set global vars
process_args $*

# build docs?
if $BUILDDOCS; then
    # verify env
    check_docs_buildenv

    # re-build?
    if $REBUILD; then
        clean_docs
    fi

    # build docs
    DOCSPATH=$THISPATH/../docs
    DOCSBUILDPATH=$THISPATH/../docs/_build
    DOCSINDEXPATH=$DOCSBUILDPATH/index.html
    echo "building docs..."
    echo "build path: "$DOCSPATH
    pipenv run sphinx-build -b html $DOCSPATH $DOCSBUILDPATH

    # open docs after build?
    if $OPENDOCS; then
        echo "opening docs..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # Mac OSX
            open $DOCSINDEXPATH
        elif [[ "$OSTYPE" == "cygwin" ]]; then
            # POSIX compatibility layer and Linux environment emulation for Windows
            start $DOCSINDEXPATH
        elif [[ "$OSTYPE" == "msys" ]]; then
            # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
            start $DOCSINDEXPATH
        elif [[ "$OSTYPE" == "win32" ]]; then
            # I'm not sure this can happen.
            start $DOCSINDEXPATH
        fi
    fi

# build labs?
elif $BUILDLABS; then
    # verify env
    check_labs_buildenv

    # re-build?
    if $REBUILD; then
        clean_labs
    fi

    # start a log file and listen
    cat /dev/null > ./buildlog.log
    tail -f ./buildlog.log &

    # build labs
    echo "building labs..."
    "$DEVENV" "$LABS" "//build" "Debug" "//out" "./buildlog.log"

    # clean log file
    kill $!
    rm -f ./buildlog.log

    # build and pack utilities
    # build pyrevit cli auto complete helper
    echo "building autocomplete helper binary"
    rm -f $BINPATH/pyrevit-autocomplete.exe
    go get github.com/posener/complete/gocomplete
    go build -o=$BINPATH/pyrevit-autocomplete.exe $UTILSPATH/pyrevit-autocomplete.go
    upx $BINPATH/pyrevit-autocomplete.exe

    # build pyrevit fileinfo getter
    echo "building fileinfo helper binary"
    rm -f $BINPATH/pyrevit-fileinfo.exe
    go build -o=$BINPATH/pyrevit-fileinfo.exe $UTILSPATH/pyrevit-fileinfo.go
    upx $BINPATH/pyrevit-fileinfo.exe
fi

# done
echo "build completed..."